// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
   url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String    @id @default(cuid())
   clerkId            String    @unique   
  email              String    @unique
  firstname               String?
  lastname                String?
  image       String?
  points             Int       @default(0)
  referralCode       String    @unique
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  services           Service[]
  activityLogs       ActivityLog[]
  referredUsers      User[]    @relation("Referrals")
  referredBy         User?     @relation("Referrals", fields: [referredById], references: [id])
  referredById       String?

  WritingService TutoringService[]

  TestAttempt TestAttempt[]
}

model TutoringService {
  id         String    @id @default(cuid())
  type       ServiceType
  subject    String?
  twoDaysPrice Int?
  threeDaysPrice Int?
  fiveDaysPrice Int?
   createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User?     @relation(fields: [userId], references: [id])
  userId      String? 
}

enum Role {
  USER
  TUTOR
  WRITER
  ADMIN
}

model Service {
  id          String    @id @default(cuid())
  type        ServiceType
  subject     String?
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User?     @relation(fields: [userId], references: [id])
  userId      String? 
  ResearchAndAssignmentPlans Json?
  bookWritingPlans Json?
  businessPlans Json?
  sopPlans Json?
  publishingPlans Json?
  addOn String?
  addOnPrice Int?
  revisions   Int?
  
}



enum ServiceType {
  PERSONALIZED_TUTORING
  RESEARCH_WRITING
  ASSIGNMENT_HELP
  BOOK_WRITING
  BUSINESS_PLAN
  SOP_WRITING
  PROOFREADING
  PUBLISHING
}

enum ServiceLevel {
  BASIC
  STANDARD
  PREMIUM
  SPECIAL
}

model ActivityLog {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  serviceDetail String
  serviceType   ServiceType
  referenceId String
  amount      Float
  createdAt   DateTime  @default(now())
}

model ContentLibrary {
  id          String    @id @default(cuid())
  title       String
  type        ContentType
  subject     String?
  level       String?
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum ContentType {
  CURRICULUM
  ASSESSMENT
  LEARNING_STYLE_TEST
  TEST
}

enum SchoolLevel {
  PRE_K
  KINDERGARTEN
  KINDERGARTEN_1
  KINDERGARTEN_2
  GRADE_1
  GRADE_2
  GRADE_3
  GRADE_4
  GRADE_5
  GRADE_6
  GRADE_7
  GRADE_8
  GRADE_9
  GRADE_10
  GRADE_11
  GRADE_12
  PRIMARY
  SECONDARY
  HIGH_SCHOOL
  UNDERGRADUATE
  POSTGRADUATE
  PROFESSIONAL
}


enum SubjectArea {
  MATHEMATICS
  ENGLISH
  SCIENCES
  LANGUAGES
  HUMANITIES
  SOCIAL_STUDIES
  COMPUTER_SCIENCE
  BUSINESS
  ARTS
  OTHER
}
model TestAttempt {
  id              String        @id @default(cuid())
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  test            Test          @relation(fields: [testId], references: [id])
  testId          String
  score           Float?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}


model Test {
  id              String    @id @default(cuid())
  schoolLevel     SchoolLevel
  subjectArea     SubjectArea
  topic           String?   
  passingScore    Float?    // Passing score percentage (optional)
  questions       Question[]
  isPublished     Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  TestAttempt TestAttempt[]
}

model Question {
  id          String    @id @default(cuid())
  test        Test      @relation(fields: [testId], references: [id])
  testId      String
  questionText String
  questionImage String?
  type        QuestionType
  options     QuestionOption[]
  hasPicture      Boolean   @default(false)
  // answers     Answer[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model QuestionOption {
  id          String    @id @default(cuid())
  question    Question  @relation(fields: [questionId], references: [id])
  questionId  String
  optionText  String
  isCorrect   Boolean
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// model TestAttempt {
//   id          String    @id @default(cuid())
//   user        User      @relation(fields: [userId], references: [clerkId])
//   userId      String
//   test        Test      @relation(fields: [testId], references: [id])
//   testId      String
//   answers     Answer[]
//   score       Float?
//   startedAt   DateTime  @default(now())
//   completedAt DateTime?
//   status      TestStatus @default(IN_PROGRESS)
// }

// model Answer {
//   id            String    @id @default(cuid())
//   // testAttempt   TestAttempt @relation(fields: [testAttemptId], references: [id])
//   testAttemptId String
//   question      Question  @relation(fields: [questionId], references: [id])
//   questionId    String
//   selectedOptions String[] // Array of selected option IDs
//   isCorrect     Boolean?
//   points        Int?
//   createdAt     DateTime  @default(now())
// }

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  THEORY
}

enum TestStatus {
  IN_PROGRESS
  COMPLETED
  EXPIRED
}

model Newsletter {
  id        String    @id @default(cuid())
  email     String    @unique
  createdAt DateTime  @default(now())
}

model Testimonial {
  id        String    @id @default(cuid())
  name      String
  content   String
  rating    Int
  createdAt DateTime  @default(now())
}

//make userId =  clerkId
model UserDevice {
  id          String   @id @default(cuid())
  userId      String
  deviceId    String
  browserName String
  osName      String
  ipAddress   String
  geoCity     String?
  geoCountry  String?
  lastSeen    DateTime
  createdAt   DateTime @default(now())

  @@unique([userId, deviceId])
}