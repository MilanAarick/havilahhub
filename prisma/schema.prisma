// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
   url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String    @id @default(cuid())
   clerkId            String    @unique   
  email              String    @unique
  firstname               String?
  lastname                String?
  image       String?
  points             Int       @default(0)
  referralCode       String    @unique
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  services           Service[]
  activityLogs       ActivityLog[]
  referredUsers      User[]    @relation("Referrals")
  referredBy         User?     @relation("Referrals", fields: [referredById], references: [id])
  referredById       String?
   testAttempts       TestAttempt[]
}

enum Role {
  USER
  TUTOR
  WRITER
  ADMIN
}

model Service {
  id          String    @id @default(cuid())
  type        ServiceType
  subject     String?
  level       String?
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
    user        User?     @relation(fields: [userId], references: [id])
  userId      String? 
  price       Float
}

enum ServiceType {
  PERSONALIZED_TUTORING
  EXAM_PREPARATION
  RESEARCH_WRITING
  BOOK_WRITING
  BUSINESS_PLAN
  SOP_WRITING
}

model ActivityLog {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  serviceDetail String
  serviceType   ServiceType
  referenceId String
  amount      Float
  createdAt   DateTime  @default(now())
}

model ContentLibrary {
  id          String    @id @default(cuid())
  title       String
  type        ContentType
  subject     String?
  level       String?
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum ContentType {
  CURRICULUM
  ASSESSMENT
  LEARNING_STYLE_TEST
  TEST
}

enum SchoolLevel {
  PRIMARY
  SECONDARY
  HIGH_SCHOOL
  UNDERGRADUATE
  POSTGRADUATE
  PROFESSIONAL
}


enum SubjectArea {
  MATHEMATICS
  SCIENCES
  LANGUAGES
  HUMANITIES
  SOCIAL_STUDIES
  COMPUTER_SCIENCE
  BUSINESS
  ARTS
  OTHER
}

model Test {
  id              String    @id @default(cuid())
  title           String
  description     String?
  schoolLevel     SchoolLevel
  subjectArea     SubjectArea
  topic           String?   // Specific topic within the subject area
  grade           String?   // Specific grade level if applicable
  timeLimit       Int?      // Time limit in minutes (optional)
  passingScore    Float?    // Passing score percentage (optional)
  difficultyLevel String?   // e.g., "Beginner", "Intermediate", "Advanced"
  questions       Question[]
  attempts        TestAttempt[]
  isPublished     Boolean   @default(false)
  metadata        Json?     // For additional custom fields
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Question {
  id          String    @id @default(cuid())
  test        Test      @relation(fields: [testId], references: [id])
  testId      String
  questionText String
  type        QuestionType
  options     QuestionOption[]
  answers     Answer[]
  points      Int       @default(1)
  order       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model QuestionOption {
  id          String    @id @default(cuid())
  question    Question  @relation(fields: [questionId], references: [id])
  questionId  String
  optionText  String
  isCorrect   Boolean
  order       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model TestAttempt {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [clerkId])
  userId      String
  test        Test      @relation(fields: [testId], references: [id])
  testId      String
  answers     Answer[]
  score       Float?
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  status      TestStatus @default(IN_PROGRESS)
}

model Answer {
  id            String    @id @default(cuid())
  testAttempt   TestAttempt @relation(fields: [testAttemptId], references: [id])
  testAttemptId String
  question      Question  @relation(fields: [questionId], references: [id])
  questionId    String
  selectedOptions String[] // Array of selected option IDs
  isCorrect     Boolean?
  points        Int?
  createdAt     DateTime  @default(now())
}

enum QuestionType {
  MULTIPLE_CHOICE
  MULTIPLE_SELECT
  TRUE_FALSE
  SHORT_ANSWER
  ESSAY
}

enum TestStatus {
  IN_PROGRESS
  COMPLETED
  EXPIRED
}

model Newsletter {
  id        String    @id @default(cuid())
  email     String    @unique
  createdAt DateTime  @default(now())
}

model Testimonial {
  id        String    @id @default(cuid())
  name      String
  content   String
  rating    Int
  createdAt DateTime  @default(now())
}